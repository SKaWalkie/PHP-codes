--------(Slip 1)--------------
Q1) PHP self-processing page: Reverse each word in a string (show original and transformed)

File: reverse_words.php

<?php
// reverse_words.php (self-processing)
function reverse_each_word($s){
    $words = preg_split('/\s+/', trim($s));
    $rev = array_map(fn($w) => strrev($w), $words);
    return implode(' ', $rev);
}
$input = $_POST['text'] ?? '';
?>
<!DOCTYPE html><html><body>
<form method="post">
  <label>Enter text:</label><br>
  <textarea name="text" rows="4" cols="50" required><?php echo htmlspecialchars($input); ?></textarea><br>
  <button type="submit">Reverse Words</button>
</form>
<?php if($_SERVER['REQUEST_METHOD']==='POST'): ?>
  <h3>Original:</h3><pre><?php echo htmlspecialchars($input); ?></pre>
  <h3>Reversed by word:</h3><pre><?php echo htmlspecialchars(reverse_each_word($input)); ?></pre>
<?php endif; ?>
</body></html>


Q2) Read student.dat, compute percentage, display table

Assume student.dat lines: rollno,name,os,wt,ds,python

File: show_students.php  | Sample data file: student.dat

<?php
// show_students.php
$filename = __DIR__ . "/student.dat";
if(!file_exists($filename)){ die("student.dat not found"); }
$rows = [];
$fh = fopen($filename,"r");
while(($line = fgets($fh)) !== false){
    $line = trim($line);
    if($line==='') continue;
    [$r,$name,$os,$wt,$ds,$py] = array_map('trim', explode(",", $line));
    $marks = [$os,$wt,$ds,$py];
    $total = array_sum($marks);
    $percent = round($total / (4*100) * 100, 2); // each subject out of 100
    $rows[] = compact('r','name','os','wt','ds','py','total','percent');
}
fclose($fh);
?>
<!DOCTYPE html><html><body>
<h2>Student Results</h2>
<table border="1" cellpadding="6">
  <tr><th>Roll</th><th>Name</th><th>OS</th><th>WT</th><th>DS</th><th>Python</th><th>Total</th><th>%</th></tr>
  <?php foreach($rows as $row): ?>
    <tr>
      <td><?= htmlspecialchars($row['r']) ?></td>
      <td><?= htmlspecialchars($row['name']) ?></td>
      <td><?= htmlspecialchars($row['os']) ?></td>
      <td><?= htmlspecialchars($row['wt']) ?></td>
      <td><?= htmlspecialchars($row['ds']) ?></td>
      <td><?= htmlspecialchars($row['py']) ?></td>
      <td><?= $row['total'] ?></td>
      <td><?= $row['percent'] ?></td>
    </tr>
  <?php endforeach; ?>
</table>
</body></html>

student.dat (example):

1,Asha,78,82,69,90
2,Raj,65,71,68,60
3,Meera,92,88,94,86
-----------(Slip 2)--------------
Q1) Sessions â store username on one page, retrieve on another

Files: set_user.php, get_user.php

<?php // set_user.php
session_start();
if($_SERVER['REQUEST_METHOD']==='POST'){
  $_SESSION['username'] = $_POST['username'] ?? '';
  header('Location: get_user.php'); exit;
} ?>
<!DOCTYPE html><html><body>
<form method="post">
  <label>Username:</label>
  <input name="username" required>
  <button type="submit">Save to Session</button>
</form>
</body></html>

<?php // get_user.php
session_start();
$user = $_SESSION['username'] ?? null;
?>
<!DOCTYPE html><html><body>
<button onclick="window.location='get_user.php'">Get User</button>
<?php if($user): ?>
  <h3>Username from session: <?= htmlspecialchars($user) ?></h3>
<?php else: ?>
  <p>No username set. Go to <a href="set_user.php">set_user.php</a></p>
<?php endif; ?>
</body></html>


Q2) PostgreSQL Item table + PHP list

DDL (PostgreSQL):

-- item.sql
CREATE TABLE IF NOT EXISTS item (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  price NUMERIC(10,2) NOT NULL,
  rating NUMERIC(3,1) CHECK (rating>=0 AND rating<=5)
);

PHP (pdo_pgsql): list_items.php

<?php
$dsn = "pgsql:host=localhost;port=5432;dbname=yourdb";
$user = "youruser"; $pass = "yourpass";
try{
  $pdo = new PDO($dsn,$user,$pass, [PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION]);
  $stmt = $pdo->query("SELECT id,name,price,rating FROM item ORDER BY id");
  $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
}catch(Exception $e){ die("DB error: ".$e->getMessage()); }
?>
<!DOCTYPE html><html><body>
<h2>Items</h2>
<table border="1" cellpadding="6">
<tr><th>ID</th><th>Name</th><th>Price</th><th>Rating</th></tr>
<?php foreach($rows as $r): ?>
<tr>
 <td><?= $r['id'] ?></td>
 <td><?= htmlspecialchars($r['name']) ?></td>
 <td><?= $r['price'] ?></td>
 <td><?= $r['rating'] ?></td>
</tr>
<?php endforeach; ?>
</table>
</body></html>
-----------(Slip 3)--------------
Q1) Fibonacci (self-processing)
File: fib.php

<?php
function fib($n){
  $a=0;$b=1;$out=[];
  for($i=0;$i<$n;$i++){ $out[]=$a; [$a,$b]=[$b,$a+$b]; }
  return $out;
}
$n = isset($_POST['n']) ? (int)$_POST['n'] : null;
?>
<!DOCTYPE html><html><body>
<form method="post">
  <label>Enter count N:</label>
  <input type="number" name="n" min="1" required value="<?= htmlspecialchars($n??'') ?>">
  <button>Show Fibonacci</button>
</form>
<?php if($n): ?><pre><?php echo implode(', ', fib($n)); ?></pre><?php endif; ?>
</body></html>


Q2) File info menu (type, last modified, size)
File: file_info.php

<?php
$fname = $_POST['fname'] ?? '';
$info = null; $err = null;
if($_SERVER['REQUEST_METHOD']==='POST'){
  if(file_exists($fname)){
    $info = [
      'type' => filetype($fname),
      'mtime' => date('Y-m-d H:i:s', filemtime($fname)),
      'size' => filesize($fname)
    ];
  } else { $err = 'File does not exist.'; }
}
?>
<!DOCTYPE html><html><body>
<form method="post">
  <label>Filename (path):</label>
  <input name="fname" required value="<?= htmlspecialchars($fname) ?>">
  <button type="submit">Get Info</button>
</form>
<?php if($err) echo "<p style='color:red'>$err</p>"; ?>
<?php if($info): ?>
  <ul>
    <li>Type: <?= htmlspecialchars($info['type']) ?></li>
    <li>Last Modified: <?= htmlspecialchars($info['mtime']) ?></li>
    <li>Size (bytes): <?= htmlspecialchars($info['size']) ?></li>
  </ul>
<?php endif; ?>
</body></html>
-----------(Slip 4)--------------
Q1) JSON object + JSON Schema for Book
Files: book.json, book.schema.json

// book.json
{
  "bookno": 101,
  "b_name": "Clean Code",
  "pub_name": "Prentice Hall",
  "b_price": 550.00
}

// book.schema.json (Draft 2020-12)
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Book",
  "type": "object",
  "properties": {
    "bookno": {"type":"integer"},
    "b_name": {"type":"string"},
    "pub_name": {"type":"string"},
    "b_price": {"type":"number","minimum":0}
  },
  "required": ["bookno","b_name","pub_name","b_price"],
  "additionalProperties": false
}


Q2) AJAX load text file
Files: index.html, data.txt

<!-- index.html -->
<!DOCTYPE html><html><body>
<button id="btn">Display</button>
<pre id="out"></pre>
<script>
document.getElementById('btn').onclick = async () => {
  const res = await fetch('data.txt');
  document.getElementById('out').textContent = await res.text();
};
</script>
</body></html>

data.txt:
Hello from AJAX!
-----------(Slip 5)--------------
Q1) Celsius to Fahrenheit with validation (self-processing)
File: temp.php

<?php
$err=''; $c=''; $f=null;
if($_SERVER['REQUEST_METHOD']==='POST'){
  $c = trim($_POST['c'] ?? '');
  if($c==='' || !is_numeric($c)){
    $err = "Enter a valid number.";
  } else {
    $f = $c * 9/5 + 32;
  }
}
?>
<!DOCTYPE html><html><body>
<form method="post">
  <label>Celsius:</label>
  <input name="c" value="<?= htmlspecialchars($c) ?>" required>
  <button>Convert</button>
</form>
<?php if($err) echo "<p style='color:red'>$err</p>"; ?>
<?php if($f!==null): ?><p>Fahrenheit: <?= round($f,2) ?></p><?php endif; ?>
</body></html>


Q2) Append contents of file1 into file2
File: append_files.php

<?php
$msg='';
if($_SERVER['REQUEST_METHOD']==='POST'){
  $f1 = $_POST['f1'] ?? '';
  $f2 = $_POST['f2'] ?? '';
  if(!file_exists($f1)) $msg = "Source file not found.";
  else {
    $data = file_get_contents($f1);
    file_put_contents($f2, $data, FILE_APPEND);
    $msg = "Appended contents of $f1 into $f2";
  }
}
?>
<!DOCTYPE html><html><body>
<form method="post">
  <label>Source file:</label><input name="f1" required>
  <label>Destination file:</label><input name="f2" required>
  <button>Append</button>
</form>
<p><?= htmlspecialchars($msg) ?></p>
</body></html>
-----------(Slip 6)--------------
Q1) JSON Person with nested Address (person.json)
{
  "firstname":"Amit","lastname":"Kulkarni","age":21,
  "address":{"streetaddress":"MG Road","city":"Pune","state":"MH","postalcode":"411001"}
}

Q2) Emp table + PHP filter by salary
-- emp.sql
CREATE TABLE IF NOT EXISTS emp(eid SERIAL PRIMARY KEY, ename TEXT NOT NULL, salary NUMERIC(10,2) NOT NULL);

-- filter_emp.php
<?php
$dsn="pgsql:host=localhost;port=5432;dbname=yourdb"; $u="youruser"; $p="yourpass";
$min = isset($_GET['min']) ? (float)$_GET['min'] : 0;
$pdo=new PDO($dsn,$u,$p,[PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION]);
$st=$pdo->prepare("SELECT eid,ename,salary FROM emp WHERE salary > :s ORDER BY salary DESC");
$st->execute([':s'=>$min]); $rows=$st->fetchAll(PDO::FETCH_ASSOC);
?>
<!DOCTYPE html><html><body>
<form><label>Min Salary:</label><input name="min" type="number" step="0.01" value="<?= htmlspecialchars($min) ?>"><button>Search</button></form>
<table border="1"><tr><th>EID</th><th>Name</th><th>Salary</th></tr>
<?php foreach($rows as $r): ?><tr><td><?= $r['eid'] ?></td><td><?= htmlspecialchars($r['ename']) ?></td><td><?= $r['salary'] ?></td></tr><?php endforeach; ?>
</table></body></html>

-----------(Slip 7)--------------
Q1) Check file exists
<?php
$f = $_POST['f'] ?? '';
$msg='';
if($_SERVER['REQUEST_METHOD']==='POST'){
  $msg = file_exists($f) ? "File exists." : "File NOT found.";
}
?>
<!DOCTYPE html><html><body><form method="post">
<input name="f" required placeholder="path/filename"><button>Check</button></form><p><?= htmlspecialchars($msg) ?></p></body></html>

Q2) Sticky self-processing form (username, age, email)
<?php
$u=$_POST['username']??''; $age=$_POST['age']??''; $em=$_POST['email']??'';
?>
<!DOCTYPE html><html><body>
<form method="post">
<input name="username" value="<?= htmlspecialchars($u) ?>" placeholder="Username" required>
<input name="age" type="number" value="<?= htmlspecialchars($age) ?>" required>
<input name="email" type="email" value="<?= htmlspecialchars($em) ?>" required>
<button>Submit</button>
</form>
<?php if($_SERVER['REQUEST_METHOD']==='POST'): ?>
<h3>Submitted</h3>
<ul><li><?= htmlspecialchars($u) ?></li><li><?= htmlspecialchars($age) ?></li><li><?= htmlspecialchars($em) ?></li></ul>
<?php endif; ?>
</body></html>

-----------(Slip 8)--------------
Q1) JSON Route + PHP decode
route.json
{
  "route_no": 101, "source": "Pune", "destination": "Mumbai", "no_of_stations": 9
}
decode_route.php
<?php $obj=json_decode(file_get_contents('route.json'),true); ?>
<!DOCTYPE html><html><body><pre><?php print_r($obj); ?></pre></body></html>

Q2) Item.xml + CSS
item.xml
<?xml version="1.0"?>
<Item>
  <ItemName>Pen</ItemName>
  <ItemPrice>10</ItemPrice>
  <Quantity>5</Quantity>
  <!-- repeat 5 items -->
</Item>
item.css
ItemName{color:red;font-family:"Copperplate Gothic Light";font-size:16pt;font-weight:bold}
ItemPrice,Quantity{color:yellow;font-family:Arial;font-size:12pt;font-weight:bold}
(Use an XML-stylesheet PI)
<?xml-stylesheet type="text/css" href="item.css"?> in the XML header.

-----------(Slip 9)--------------
Q1) Check DB connection (PHP PDO)
<?php
try{ new PDO("pgsql:host=localhost;port=5432;dbname=yourdb","user","pass"); echo "Connected"; }
catch(Exception $e){ echo "Failed: ".$e->getMessage(); }
?>

Q2) Visit counter with Cookies
<?php
$visits = isset($_COOKIE['visits']) ? (int)$_COOKIE['visits'] : 0;
$visits++;
setcookie('visits',$visits,time()+3600*24*365);
echo $visits===1 ? 'Welcome, You have visited for first time' : "Visits: $visits";
?>

-----------(Slip 10)--------------
Q1) Generate XML BookInfo (PHP)
<?php
$books=[['1','JAVA','Balguru Swami','250','2006'],['2','C','Deni Ritchie','500','1971']];
$xml=new SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?><BookInfo></BookInfo>');
foreach($books as $b){$bk=$xml->addChild('book');$bk->addChild('bookno',$b[0]);$bk->addChild('bookname',$b[1]);$bk->addChild('authorname',$b[2]);$bk->addChild('price',$b[3]);$bk->addChild('year',$b[4]);}
Header('Content-type: text/xml'); echo $xml->asXML();
?>

Q2) Reverse each word (self-processing) â use Slip 1 Q1 (reverse_words.php)

-----------(Slip 11)--------------
Q1) Last access time of a file
<?php
$f=$_POST['f']??''; $out='';
if($_SERVER['REQUEST_METHOD']==='POST'){
 if(!file_exists($f)) $out='Not found'; else $out=date('Y-m-d H:i:s', fileatime($f));
}
?>
<!DOCTYPE html><html><body><form method="post"><input name="f" required><button>Show</button></form><p><?= htmlspecialchars($out) ?></p></body></html>

Q2) Movie table + highest rating
-- movie.sql
CREATE TABLE IF NOT EXISTS movie(id SERIAL PRIMARY KEY,mname TEXT,release_year INT,rating NUMERIC(3,1));
list_top.php
<?php
$pdo=new PDO("pgsql:host=localhost;port=5432;dbname=yourdb","user","pass"); 
$r=$pdo->query("SELECT mname FROM movie ORDER BY rating DESC NULLS LAST, id LIMIT 1")->fetchColumn();
echo $r?"Top Movie: ".htmlspecialchars($r):"No data";
?>

-----------(Slip 12)--------------
Q1) Factorial (self-processing)
<?php
$n=$_POST['n']??''; $ans=null;
if($_SERVER['REQUEST_METHOD']==='POST'){ $v=(int)$n; $ans=1; for($i=2;$i<=$v;$i++) $ans*=$i; }
?>
<!DOCTYPE html><html><body><form method="post">
<input type="number" name="n" min="0" required value="<?= htmlspecialchars($n) ?>">
<button>Factorial</button></form><?php if($ans!==null) echo "<p>$n! = $ans</p>"; ?></body></html>

Q2) Property/Owner tables + list properties by owner
-- DDL
CREATE TABLE owner(oname TEXT PRIMARY KEY,address TEXT,phone TEXT);
CREATE TABLE property(pno SERIAL PRIMARY KEY, description TEXT, area NUMERIC, oname TEXT REFERENCES owner(oname));
-- PHP (props_by_owner.php)
<?php
$pdo=new PDO("pgsql:host=localhost;port=5432;dbname=yourdb","user","pass");
$on=$_GET['oname']??''; $rows=[];
if($on!==''){ $st=$pdo->prepare("SELECT pno,description,area FROM property WHERE oname=:o"); $st->execute([':o'=>$on]); $rows=$st->fetchAll(PDO::FETCH_ASSOC); }
?>
<!DOCTYPE html><html><body><form><input name="oname" placeholder="Owner" value="<?= htmlspecialchars($on) ?>"><button>Search</button></form>
<table border=1><?php foreach($rows as $r): ?><tr><td><?= $r['pno'] ?></td><td><?= htmlspecialchars($r['description']) ?></td><td><?= $r['area'] ?></td></tr><?php endforeach; ?></table></body></html>

-----------(Slip 13)--------------
Q1) JSON + Schema for Dept
dept.json
{ "dno":10, "dname":"IT", "dlocation":"Pune" }

dept.schema.json
{ "$schema":"https://json-schema.org/draft/2020-12/schema","type":"object","properties":{"dno":{"type":"integer"},"dname":{"type":"string"},"dlocation":{"type":"string"}},"required":["dno","dname","dlocation"],"additionalProperties":false }

Q2) Login with 3 attempts using Session
<?php
session_start();
$U='admin'; $P='secret';
$_SESSION['tries'] = $_SESSION['tries'] ?? 0;
$msg='';
if($_SERVER['REQUEST_METHOD']==='POST' && $_SESSION['tries']<3){
 if(($_POST['u']??'')===$U && ($_POST['p']??'')===$P){ $_SESSION['ok']=true; $msg='Welcome'; }
 else{ $_SESSION['tries']++; $msg='Invalid. Tries: '.$_SESSION['tries']; }
}
if(isset($_SESSION['ok']) && $_SESSION['ok']){ echo "<h3>Welcome</h3>"; exit; }
if($_SESSION['tries']>=3){ echo "<p>Locked out.</p>"; exit; }
?>
<form method="post"><input name="u" placeholder="User"><input type="password" name="p"><button>Login</button></form><p><?= htmlspecialchars($msg) ?></p>

-----------(Slip 14)--------------
Q1) Upload a file, show size and type
<?php
if($_SERVER['REQUEST_METHOD']==='POST' && isset($_FILES['f'])){
 $sz=$_FILES['f']['size']; $type=$_FILES['f']['type']; echo "Size: $sz bytes, Type: ".htmlspecialchars($type);
 move_uploaded_file($_FILES['f']['tmp_name'], __DIR__.'/uploads/'.basename($_FILES['f']['name']));
}
?>
<form method="post" enctype="multipart/form-data"><input type="file" name="f" required><button>Upload</button></form>

Q2) Last access time via cookie
<?php
date_default_timezone_set('Asia/Kolkata');
$last = $_COOKIE['last_access'] ?? null;
setcookie('last_access', time(), time()+3600*24*365);
echo $last? ('Last access: '.date('Y-m-d H:i:s',$last)) : 'Welcome, You have visited for first time';
?>

-----------(Slip 15)--------------
Q1) Factors (self-processing)
<?php
$n=$_POST['n']??''; $f=[];
if($_SERVER['REQUEST_METHOD']==='POST'){ $v=(int)$n; for($i=1;$i<=$v;$i++) if($v%$i==0) $f[]=$i; }
?>
<form method="post"><input type="number" name="n" min="1" required><button>Show Factors</button></form>
<?php if($f) echo implode(', ',$f); ?>

Q2) DoctorâHospital many-to-one; list doctors visiting a hospital
-- DDL
CREATE TABLE hospital(hosp_no SERIAL PRIMARY KEY,hname TEXT,hcity TEXT);
CREATE TABLE doctor(doc_no SERIAL PRIMARY KEY,dname TEXT,address TEXT,city TEXT,area TEXT,hosp_no INT REFERENCES hospital(hosp_no));
-- PHP (docs_by_hosp.php)
<?php
$pdo=new PDO("pgsql:host=localhost;port=5432;dbname=yourdb","user","pass"); $hn=$_GET['hname']??''; $rows=[];
if($hn!==''){ $st=$pdo->prepare("SELECT d.doc_no,d.dname FROM doctor d JOIN hospital h ON d.hosp_no=h.hosp_no WHERE h.hname=:h"); $st->execute([':h'=>$hn]); $rows=$st->fetchAll(PDO::FETCH_ASSOC); }
?><form><input name="hname" value="<?= htmlspecialchars($hn) ?>" placeholder="Hospital name"><button>Get</button></form>
<table border=1><?php foreach($rows as $r): ?><tr><td><?= $r['doc_no'] ?></td><td><?= htmlspecialchars($r['dname']) ?></td></tr><?php endforeach; ?></table>

-----------(Slip 16)--------------
Q1) Product.xml + CSS styling
product.xml
<?xml version="1.0"?>
<?xml-stylesheet type="text/css" href="product.css"?>
<Product>
 <ProductName>Phone</ProductName>
 <ProductPrice>19999</ProductPrice>
 <Quantity>10</Quantity>
 <!-- 5 products total -->
</Product>
product.css
ProductName{color:red;font-family:"Copperplate Gothic Light";font-size:16pt;font-weight:bold}

Q2) Dept/Emp; count employees in a department
-- DDL
CREATE TABLE dept(dno SERIAL PRIMARY KEY,dname TEXT UNIQUE,dlocation TEXT);
CREATE TABLE emp(eno SERIAL PRIMARY KEY,ename TEXT,edesignation TEXT,esalary NUMERIC(10,2),dno INT REFERENCES dept(dno));
-- PHP (count_by_dept.php)
<?php
$pdo=new PDO("pgsql:host=localhost;port=5432;dbname=yourdb","user","pass"); $dn=$_GET['dname']??''; $cnt=null;
if($dn!==''){ $st=$pdo->prepare("SELECT COUNT(*) FROM emp e JOIN dept d ON e.dno=d.dno WHERE d.dname=:n"); $st->execute([':n'=>$dn]); $cnt=$st->fetchColumn(); }
?><form><input name="dname" value="<?= htmlspecialchars($dn) ?>" placeholder="Department"><button>Count</button></form>
<?php if($cnt!==null) echo "Count: ".$cnt; ?>

-----------(Slip 17)--------------
Q1) JSON Array of Pizza objects
pizzas.json
[
  {"Pizzaname":"Margherita","Base":"Thin","Toppings":["Cheese","Tomato"],"spicy":false,"veg":true},
  {"Pizzaname":"Pepperoni","Base":"Hand Tossed","Toppings":["Pepperoni"],"spicy":true,"veg":false},
  {"Pizzaname":"Veggie","Base":"Cheese Burst","Toppings":["Capsicum","Onion","Corn"],"spicy":false,"veg":true}
]

Q2) AJAX Get Details from Teacher table
-- teacher.sql
CREATE TABLE IF NOT EXISTS teacher(tno SERIAL PRIMARY KEY,name TEXT,subject TEXT,research_area TEXT);
index.html
<!DOCTYPE html><html><body><button id="b">Get Details</button><div id="out"></div><script>
document.getElementById('b').onclick=async()=>{const r=await fetch('teachers.php');document.getElementById('out').innerHTML=await r.text();};
</script></body></html>
teachers.php
<?php $pdo=new PDO("pgsql:host=localhost;port=5432;dbname=yourdb","user","pass");$rows=$pdo->query("SELECT * FROM teacher ORDER BY tno")->fetchAll(PDO::FETCH_ASSOC);echo '<table border=1><tr><th>Tno</th><th>Name</th><th>Subject</th><th>Research</th></tr>';foreach($rows as $r){echo '<tr><td>'.$r['tno'].'</td><td>'.htmlspecialchars($r['name']).'</td><td>'.htmlspecialchars($r['subject']).'</td><td>'.htmlspecialchars($r['research_area']).'</td></tr>'; } echo '</table>'; ?>

-----------(Slip 18)--------------
Q1) Set username cookie for 1 hour
<?php
if($_SERVER['REQUEST_METHOD']==='POST'){ setcookie('username', $_POST['u']??'', time()+3600); echo 'Saved!'; }
?>
<form method="post"><input name="u" placeholder="Username" required><button>Set Cookie</button></form>

Q2) Upload file (HTML + PHP)
<form method="post" enctype="multipart/form-data" action="upload.php"><input type="file" name="f" required><button>Upload</button></form>
upload.php
<?php if(isset($_FILES['f'])){ move_uploaded_file($_FILES['f']['tmp_name'], __DIR__.'/uploads/'.basename($_FILES['f']['name'])); echo 'Uploaded.'; } ?>

-----------(Slip 19)--------------
Q1) fread() demo
<?php
$f=$_POST['f']??''; $out='';
if($_SERVER['REQUEST_METHOD']==='POST'){
 $h=@fopen($f,'r'); if($h){ $out=fread($h, filesize($f)); fclose($h);} else $out='Cannot open';
}
?>
<form method="post"><input name="f" required><button>Read</button></form><pre><?= htmlspecialchars($out) ?></pre>

Q2) Route table + show by route_no
-- route.sql
CREATE TABLE route(route_no INT PRIMARY KEY, source TEXT, destination TEXT, no_of_stations INT);
route_details.php
<?php
$pdo=new PDO("pgsql:host=localhost;port=5432;dbname=yourdb","user","pass"); $rn=$_GET['route_no']??''; $row=null;
if($rn!==''){ $st=$pdo->prepare("SELECT * FROM route WHERE route_no=:r"); $st->execute([':r'=>$rn]); $row=$st->fetch(PDO::FETCH_ASSOC); }
?><form><input name="route_no" required><button>Get</button></form><?php if($row){ echo '<pre>'.print_r($row,true).'</pre>'; } ?>

-----------(Slip 20)--------------
Q1) Perfect number (self-processing)
<?php
$n=$_POST['n']??''; $res='';
if($_SERVER['REQUEST_METHOD']==='POST'){ $v=(int)$n; $sum=0; for($i=1;$i<$v;$i++) if($v%$i==0) $sum+=$i; $res = ($sum==$v)?'Perfect':'Not perfect'; }
?><form method="post"><input type="number" name="n" min="1" required><button>Check</button></form><p><?= htmlspecialchars($res) ?></p>

Q2) AJAX Get Details (students)
index.html
<!DOCTYPE html><html><body><button id="btn">Get Details</button><div id="out"></div><script>
document.getElementById('btn').onclick=async()=>{const r=await fetch('students.php');document.getElementById('out').innerHTML=await r.text();};
</script></body></html>
students.php
<?php echo '<table border=1><tr><th>Roll</th><th>Name</th><th>Age</th></tr><tr><td>1</td><td>Asha</td><td>20</td></tr><tr><td>2</td><td>Raj</td><td>21</td></tr></table>'; ?>

-----------(Slip 21)--------------
Q1) File exists, size, last modified
<?php
$f=$_POST['f']??''; $info='';
if($_SERVER['REQUEST_METHOD']==='POST'){
 if(file_exists($f)){ $info='Exists | Size: '.filesize($f).' | MTime: '.date('Y-m-d H:i:s',filemtime($f)); } else $info='Not found';
}
?><form method="post"><input name="f" required><button>Check</button></form><p><?= htmlspecialchars($info) ?></p>

Q2) Color settings with Cookies across 3 pages
page1.php (choose)
<?php if($_SERVER['REQUEST_METHOD']==='POST'){ setcookie('bg',$_POST['bg']); setcookie('fg',$_POST['fg']); header('Location: page2.php'); } ?>
<form method="post">BG:<input name="bg" type="color" required> FG:<input name="fg" type="color" required><button>Next</button></form>
page2.php (show selected)
<?php $bg=$_COOKIE['bg']??'#ffffff'; $fg=$_COOKIE['fg']??'#000000'; echo "<p>BG: $bg, FG: $fg</p><a href='page3.php'>Apply</a>"; ?>
page3.php (apply)
<?php $bg=$_COOKIE['bg']??'#fff'; $fg=$_COOKIE['fg']??'#000'; ?><body style="background:<?= htmlspecialchars($bg) ?>;color:<?= htmlspecialchars($fg) ?>;">Applied!</body>

-----------(Slip 22)--------------
Q1) Upload file + show size and last modified
<?php
if($_SERVER['REQUEST_METHOD']==='POST' && isset($_FILES['f'])){
 $dest=__DIR__.'/uploads/'.basename($_FILES['f']['name']);
 move_uploaded_file($_FILES['f']['tmp_name'],$dest);
 echo 'Size: '.filesize($dest).' Modified: '.date('Y-m-d H:i:s', filemtime($dest));
}
?><form method="post" enctype="multipart/form-data"><input type="file" name="f" required><button>Upload</button></form>

Q2) Count Doctors visiting a Hospital
-- DDL same as Slip 15
count.php
<?php
$pdo=new PDO("pgsql:host=localhost;port=5432;dbname=yourdb","user","pass"); $hn=$_GET['hname']??''; $cnt=null;
if($hn!==''){ $st=$pdo->prepare("SELECT COUNT(*) FROM doctor d JOIN hospital h ON d.hosp_no=h.hosp_no WHERE h.hname=:h"); $st->execute([':h'=>$hn]); $cnt=$st->fetchColumn(); }
?><form><input name="hname" value="<?= htmlspecialchars($hn) ?>" placeholder="Hospital"><button>Count</button></form><?php if($cnt!==null) echo 'Doctors: '.$cnt; ?>

-----------(Slip 23)--------------
Q1) JSON + Schema for Project
project.json
{ "pno":1, "pname":"ERP", "pduration":"6 months", "pbudget": 1500000 }
project.schema.json
{ "$schema":"https://json-schema.org/draft/2020-12/schema","type":"object","properties":{"pno":{"type":"integer"},"pname":{"type":"string"},"pduration":{"type":"string"},"pbudget":{"type":"number","minimum":0}},"required":["pno","pname","pduration","pbudget"],"additionalProperties":false }

Q2) Display file contents in uppercase
<?php
$f=$_POST['f']??''; $out='';
if($_SERVER['REQUEST_METHOD']==='POST' && file_exists($f)){ $out=strtoupper(file_get_contents($f)); }
?><form method="post"><input name="f" required><button>Uppercase</button></form><pre><?= htmlspecialchars($out) ?></pre>

-----------(Slip 24)--------------
Q1) Generate NovelInfo XML (PHP)
<?php
$novels=[['1','Jane Eyre','Charlotte Bronte','250','2006'],['2','Frankenstein','Mary Shelley','500','1971']];
$xml=new SimpleXMLElement('<NovelInfo/>');
foreach($novels as $n){$nov=$xml->addChild('novel');$nov->addChild('novelno',$n[0]);$nov->addChild('novelname',$n[1]);$nov->addChild('authorname',$n[2]);$nov->addChild('price',$n[3]);$nov->addChild('year',$n[4]);}
Header('Content-type: text/xml'); echo $xml->asXML();
?>

Q2) Route table + list by source
-- DDL same as Slip 19
by_source.php
<?php
$pdo=new PDO("pgsql:host=localhost;port=5432;dbname=yourdb","user","pass"); $src=$_GET['source']??''; $rows=[];
if($src!==''){ $st=$pdo->prepare("SELECT * FROM route WHERE source ILIKE :s"); $st->execute([':s'=>$src]); $rows=$st->fetchAll(PDO::FETCH_ASSOC); }
?><form><input name="source" required placeholder="Source"><button>Search</button></form><pre><?php print_r($rows); ?></pre>

-----------(Slip 25)--------------
Q1) Server info
<?php echo '<pre>'.print_r($_SERVER,true).'</pre>'; ?>

Q2) Copy contents of file1 into file2
<?php
if($_SERVER['REQUEST_METHOD']==='POST'){ $f1=$_POST['f1']; $f2=$_POST['f2']; if(!file_exists($f1)) echo 'Source not found'; else { copy($f1,$f2); echo 'Copied.'; } }
?><form method="post"><input name="f1" placeholder="Source" required><input name="f2" placeholder="Destination" required><button>Copy</button></form>

